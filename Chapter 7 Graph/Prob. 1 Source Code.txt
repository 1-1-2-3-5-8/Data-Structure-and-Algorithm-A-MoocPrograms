#include <stdio.h>
#include <algorithm>
using namespace std;

struct edge
{
	int e1, e2;
	int l;
	friend bool operator< (const edge& a, const edge& b)
	{
		return a.l < b.l;
	}
};

int p[30];
int r[30];
edge e[100];

int find(int x)
{
	if (p[x] == x)
		return x;
	return p[x] = find(p[x]);
}

bool same(int x, int y)
{
	return find(x) == find(y);
}

void unit(int x, int y)
{
	x = find(x);
	y = find(y);
	if (x == y)
		return;
	if (r[x] >= r[y])
	{
		p[y] = x;
		r[x] += r[y];
	}
	else
	{
		p[x] = y;
		r[y] += r[x];
	}
}

int main()
{
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
	{
		p[i] = i;
		r[i] = 1;
	}
	int en = 0;
	char name[2];
	for (int i = 0; i < n - 1; i++)
	{
		scanf("%s", name);
		int e1 = name[0] - 'A';
		int e1n;
		scanf("%d", &e1n);
		for (int j = 0; j < e1n; j++)
		{
			e[en].e1 = e1;
			scanf("%s%d", name, &e[en].l);
			e[en].e2 = name[0] - 'A';
			en++;
		}
	}
	sort(e, e + en);
	int totall = 0;
	for (int i = 0; i < en; i++)
	{
		edge& enow = e[i];
		if (!same(enow.e1, enow.e2))
		{
			totall += enow.l;
			unit(enow.e1, enow.e2);
		}
	}
	printf("%d\n", totall);
	return 0;
}