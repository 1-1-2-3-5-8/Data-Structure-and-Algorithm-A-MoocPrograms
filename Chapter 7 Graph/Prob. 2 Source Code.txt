#include <stdio.h>
#include <string.h>
#include <vector>
#include <queue>
using namespace std;

#define INTMAX (1 << 30)

struct edge
{
	int end;
	int dis;
	edge() {}
	edge(int e, int d) :end(e), dis(d) {}
	friend bool operator> (const edge& a, const edge& b)
	{
		return a.dis > b.dis;
	}
};

typedef vector<edge> etab;
typedef edge path;

struct vertex
{
	char name[100];
	etab* ep;
	vertex() :ep(new etab) {}
};

int n;
vertex v[40];

void dijkstra(int s, int e)
{
	int d[40];
	int prev[40];
	int pred[40];
	for (int i = 0; i < n; i++)
		d[i] = INTMAX;
	d[s] = 0;
	prev[s] = -1;
	priority_queue<path, vector<path>, greater<path> > que;
	que.push(path(s, 0));
	while (!que.empty())
	{
		int dis = que.top().dis;
		int now = que.top().end;
		que.pop();
		if (dis != d[now])
			continue;
		int en = v[now].ep->size();
		for (int i = 0; i < en; i++)
		{
			const edge& ed = (*v[now].ep)[i];
			if (dis + ed.dis < d[ed.end])
			{
				d[ed.end] = dis + ed.dis;
				prev[ed.end] = now;
				pred[ed.end] = ed.dis;
				que.push(path(ed.end, d[ed.end]));
			}
		}
	}
	int end = e;
	vector<edge> p;
	while (prev[end] >= 0)
	{
		p.push_back(edge(prev[end], pred[end]));
		end = prev[end];
	}
	int size = p.size();
	for (int i = size - 1; i >= 0; i--)
		printf("%s->(%d)->", v[p[i].end].name, p[i].dis);
	printf("%s\n", v[e].name);
}

int main()
{
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		scanf("%s", v[i].name);
	int m;
	scanf("%d", &m);
	for (int i = 0; i < m; i++)
	{
		char st[100], end[100];
		int d;
		scanf("%s%s%d", st, end, &d);
		int e1, e2;
		for (e1 = 0; e1 < n; e1++)
		{
			if (!strcmp(st, v[e1].name))
				break;
		}
		for (e2 = 0; e2 < n; e2++)
		{
			if (!strcmp(end, v[e2].name))
				break;
		}
		v[e1].ep->push_back(edge(e2, d));
		v[e2].ep->push_back(edge(e1, d));
	}
	scanf("%d", &m);
	for (int i = 0; i < m; i++)
	{
		char st[100], end[100];
		scanf("%s%s", st, end);
		int s, e;
		for (s = 0; s < n; s++)
		{
			if (!strcmp(st, v[s].name))
				break;
		}
		for (e = 0; e < n; e++)
		{
			if (!strcmp(end, v[e].name))
				break;
		}
		dijkstra(s, e);
	}
	return 0;
}