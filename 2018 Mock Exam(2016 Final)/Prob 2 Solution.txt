/* Kruskal */
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define MAXN 110
#define INF 0x7fffffff

struct edge
{
	int e1, e2;
	int w;
	edge(int _x, int _y, int _w) :e1(_x), e2(_y), w(_w) {}
	friend bool operator< (edge a, edge b)
	{
		return a.w < b.w;
	}
};

int n, m;
vector<edge> e;
int par[MAXN], rk[MAXN];

int find(int x)
{
	if (par[x] == x)
		return x;
	return par[x] = find(par[x]);
}

bool same(int x, int y)
{
	return find(x) == find(y);
}

void unit(int x, int y)
{
	x = find(x);
	y = find(y);
	if (x == y)
		return;
	if (par[x] < par[y])
	{
		par[x] = y;
		rk[y] += rk[x];
	}
	else
	{
		par[y] = x;
		rk[x] += rk[y];
	}
}

int mste[MAXN];

int mst(int dele)
{
	int ecnt = 0;
	int res = 0;
	for (int i = 1; i <= n; i++)
	{
		par[i] = i;
		rk[i] = 1;
	}
	for (int i = 0; i < m; i++)
	{
		if (ecnt == n - 1)
			break;
		if (i == dele)
			continue;
		edge& ed = e[i];
		if (same(ed.e1, ed.e2))
			continue;
		res += ed.w;
		unit(ed.e1, ed.e2);
		if (dele < 0)
			mste[ecnt] = i;
		ecnt++;
	}
	if (ecnt < n - 1)
		return INF;
	return res;
}

int main()
{
	int t;
	int x, y, w;
	scanf("%d", &t);
	while (t--)
	{
		scanf("%d%d", &n, &m);
		e.clear();
		for (int i = 0; i < m; i++)
		{
			scanf("%d%d%d", &x, &y, &w);
			e.push_back(edge(x, y, w));
		}
		sort(e.begin(), e.end());
		int mstw = mst(-1);
		int i;
		for (i = 0; i < n - 1; i++)
		{
			if (mst(mste[i]) == mstw)
				break;
		}
		if (i < n - 1)
			printf("Not Unique!\n");
		else
			printf("%d\n", mstw);
	}
	return 0;
}