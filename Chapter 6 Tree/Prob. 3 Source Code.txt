#include <iostream>
using namespace std;

#define MAXSIZE 10000

struct node
{
	int data;
	node* less, *larger;
	node() :less(0), larger(0) {}
};

struct queue
{
	int head, tail;
	node* q[MAXSIZE + 1];
	queue() :head(0), tail(0) {}
	bool empty()
	{
		return head >= tail;
	}
	void push(node* t)
	{
		q[tail++] = t;
	}
	node* front()
	{
		return q[head];
	}
	node* pop()
	{
		return q[head++];
	}
};

node seq[MAXSIZE];

int main()
{
	int n = 0;
	int input;
	while (cin >> input)
	{
		seq[n].data = input;
		if (n > 0)
		{
			bool found = 0;
			node* mov = seq;
			while (!found)
			{
				if (input < mov->data)
				{
					if (mov->less)
						mov = mov->less;
					else
						found = 1;
				}
				else if (input > mov->data)
				{
					if (mov->larger)
						mov = mov->larger;
					else
						found = 1;
				}
				else
					break;
			}
			if (input < mov->data)
				mov->less = seq + n;
			else if (input > mov->data)
				mov->larger = seq + n;
		}
		n++;
	}
	queue que;
	que.push(seq);
	bool out = 0;
	while (!que.empty())
	{
		node* mov = que.pop();
		if (out)
			printf(" ");
		printf("%d", mov->data);
		out = 1;
		if (mov->less)
			que.push(mov->less);
		if (mov->larger)
			que.push(mov->larger);
	}
	return 0;
}