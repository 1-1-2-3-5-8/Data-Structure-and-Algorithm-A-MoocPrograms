#include <iostream>
#include <string.h>
#include <memory>
using namespace std;

#define MAXSIZE 1000
#define MAXSTR 100

class stack
{
public:
	stack() :size(-1) 
	{
		memset(tag, 0, sizeof(tag));
	}
	bool empty()
	{
		return size < 0;
	}
	void push(char *t)
	{
		tag[++size] = new char[MAXSTR];
		strcpy(tag[size], t);
	}
	char *top()
	{
		char *res = new char[MAXSTR];
		strcpy(res, tag[size]);
		return res;
	}
	char *pop()
	{
		char *res = new char[MAXSTR];
		strcpy(res, tag[size]);
		delete[] tag[size--];
		return res;
	}
private:
	int size;
	char *tag[MAXSIZE];
};

stack lefttag;
char str[MAXSIZE + 1];

bool match(char *s)
{
	char t[MAXSTR] = {};
	int now = 0;
	int len = strlen(str);
	int p = 0;
	while (p < len)
	{
		if (str[p] == '<')
		{
			bool open = 1;
			p++;
			while (p < len&&str[p] != '>')
			{
				if (str[p] == '/')
					open = 0;
				else
					t[now++] = str[p];
				p++;
			}
			if (str[p] != '>')
				return 0;
			if (open)
				lefttag.push(t);
			else
			{
				if (lefttag.empty())
					return 0;
				else
				{
					char *opened = lefttag.pop();
					if (strcmp(opened, t))
						return 0;
				}
			}
			now = 0;
			memset(t, 0, sizeof(t));
		}
		p++;
	}
	return lefttag.empty();
}

int main()
{
	cin.getline(str, MAXSIZE);
	printf("%s\n", match(str) ? "True" : "False");
	return 0;
}